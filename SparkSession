
val sparkSession = SparkSession.builder.
  master("local")
  .appName("Sparksession")
  .getOrCreate()


val sparkSession = SparkSession.builder.
  master("local")
  .appName("Spark Enabling hive support")
  .enableHiveSupport()
  .getOrCreate()


-- Rading Json Data 
val jsonData = spark.read.json(<path>)


-- Running sql displaying DataFrame
display(spark.sql("select * from Raj"))



Spark configurations

spark.conf.set("spark.yy.config", "play")
spark.conf.get("spark.yyy.config")


//drop the table if it already exists in the same name.
spark.sql("DROP TABLE IF EXISTS sample_hive_table")

//save as a hive table
spark.table("sample_table").write.saveAsTable("sample_hive_table")

// query on hive table 
val resultsHiveDF = spark.sql("SELECT name, rollno,totalmark,division FROM sample_hive_table WHERE totalmark > 40000")

resultsHiveDF.show(10)
 
-- By using List or Seq we can create dataFrame
val df = spark.createDataFrame(List(("John", 35), ("Thomas", 30), ("Martin", 15)))


-- Creating DataFrame By loading Json
val df = spark.read.json("examples/src/main/resources/data.json")

-- To show DataFrame
  df.show()


DataFrame Filter  
df.filter($"age" > 31).show()

In  order to  use $ symbol  we need to import spark implicits ()
import spark.implicits._


dataframe has to be first registered as a temporary view.
val df =  spark.read.json("examples/src/main/resources/data.json")
df.createOrReplaceTempView("data")
val sqlDF = spark.sql("SELECT * FROM data")
 sqlDF.show()

val df =  spark.read.json("examples/src/main/resources/data.json")
df.createGlobalTempView("data")
val sqlDF = spark.sql("SELECT * FROM data")
sqlDF.show()


df.createOrReplaceTempView  is for that session it is not avilable outside
df.createGlobalTempView   is avilable across the session.

